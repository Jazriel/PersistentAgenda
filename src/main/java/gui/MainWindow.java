package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.EmptyBorder;

import gui.tab.ICompPersistUpdatable;
import gui.tab.ITab;
import gui.tab.insertTab.InsertTab;
import gui.tab.selectTab.SelectTab;
import gui.tab.updateTab.UpdateTab;
import persistence.IAbstractPersistenceFactory;
import persistence.IFactoryPersistence;

/**
 * MainWindow. Clase que se encarga de la gestion de la ventana principal de la
 * interfaz gráfica.
 * 
 * @author Javier Martinez
 * @author Daniel Puente
 * @author Jaime Sagüillo
 * @author Jorge Zamora
 * @author Oscar Fernandez
 *
 */
public class MainWindow extends JFrame {

	/**
	 * Auto generated by eclipse.
	 */
	private static final long serialVersionUID = -7203217001393533800L;

	/**
	 * Persistencia actual.
	 */
	private int currentPersistence;
	/**
	 * Panel gráfico.
	 */
	private JPanel contentPane;
	/**
	 * Combo a utilizar.
	 */
	@SuppressWarnings("rawtypes")
	private JComboBox typeCombo;
	/**
	 * Lista de las trablas sobre las que podemos trabajar.
	 */
	private static final String[] types = new String[] { "Contactos", "Llamadas", "Tipos de contacto" };
	/**
	 * Tipos de persistencia sobre las que trabajaremos.
	 */
	private static final String[] persistenceTypes = new String[] { "Base de datos", "Ficheros binario" };

	/**
	 * Lista de pestañas.
	 */
	private List<ITab> tabs;

	/**
	 * Combo box de la persistencia
	 */
	@SuppressWarnings("rawtypes")
	private JComboBox persistCombo;

	/**
	 * Factoría de la persistencia
	 */
	private IAbstractPersistenceFactory persistenceFactory;

	/**
	 * Variable de persistencia.
	 */
	private IFactoryPersistence persistence;

	/**
	 * Panel
	 */
	private JTabbedPane tabbedPane;

	/**
	 * Permite la actualización de la persistencia dentro de nuestra aplicación.
	 */
	private List<ICompPersistUpdatable> persistUpdatables;

	/**
	 * Método MainWindow. Método que se encarga de generar la venatana.
	 * 
	 * @param persistenceFactory
	 *            Parámetro que nos da la persistencia.
	 */
	public MainWindow(IAbstractPersistenceFactory persistenceFactory) {

		this.persistenceFactory = persistenceFactory;
		this.persistence = persistenceFactory.getDBPersistence();
		currentPersistence = 0;

		setTitle("Persistent Agenda");
		initializeMainWindow();

		tabbedPane = new JTabbedPane(JTabbedPane.TOP);

		initializeComboButsBarWithLayout();

		tabs = new ArrayList<>();

		persistUpdatables = new ArrayList<>();

		initializeTabBar();

		initializeActionListeners();
	}

	/**
	 * Método initializeActionListeners. Método que se encarga de inicialización
	 * de los listeners.
	 */
	private void initializeActionListeners() {
		typeComboListener();
		persistenceComboListener();
	}

	/**
	 * Método typeComboListener. Método que se encarga de
	 */
	private void typeComboListener() {
		typeCombo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (typeCombo.getSelectedItem().toString() == types[0]) {
					for (ITab tab : tabs) {
						tab.setView(0);
					}
				} else if (typeCombo.getSelectedItem().toString() == types[1]) {
					for (ITab tab : tabs) {
						tab.setView(1);
					}
				} else {
					for (ITab tab : tabs) {
						tab.setView(2);
					}
				}
				contentPane.repaint();
			}
		});
	}

	/**
	 * Método persistenceComboListener. Método que se encarga de cambiar la
	 * persistencia dentro del comboListener.
	 */
	private void persistenceComboListener() {
		persistCombo.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (persistCombo.getSelectedIndex() != currentPersistence) {
					if (persistCombo.getSelectedIndex() == 0) {
						persistence = persistenceFactory.getDBPersistence();
						currentPersistence = 0;
					} else {
						persistence = persistenceFactory.getBinPersistence();
						currentPersistence = 1;
					}
					for (ICompPersistUpdatable updatable : persistUpdatables) {
						updatable.updatePersist(persistence);
					}
				}
			}
		});
	}

	/**
	 * Método initializeTabBar. Método que se encarga de inizializar barra de
	 * pestañas.
	 */
	private void initializeTabBar() {
		InsertTab iT = new InsertTab(persistence, tabbedPane);
		UpdateTab uT = new UpdateTab(persistence, tabbedPane);
		SelectTab sT = new SelectTab(persistence, tabbedPane);

		tabs.add(iT);
		tabs.add(uT); // :D
		tabs.add(sT);

		persistUpdatables.add(iT);
		persistUpdatables.add(uT);
		persistUpdatables.add(sT);

	}

	/**
	 * Método initializeComboButsBar. Método que se encarga de inicializar la
	 * barra de selecciones.
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private void initializeComboButsBarWithLayout() {

		GroupLayout gl_contentPane = new GroupLayout(contentPane);

		JPanel panel = new JPanel();
		// Group layout generado automaticamente
		gl_contentPane
				.setHorizontalGroup(
						gl_contentPane.createParallelGroup(Alignment.LEADING)
								.addGroup(gl_contentPane.createSequentialGroup()
										.addComponent(panel, GroupLayout.PREFERRED_SIZE, 262,
												GroupLayout.PREFERRED_SIZE)
										.addContainerGap(162, Short.MAX_VALUE))
								.addComponent(tabbedPane, GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE));
		gl_contentPane.setVerticalGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPane.createSequentialGroup()
						.addComponent(panel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(tabbedPane, GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)));

		persistCombo = new JComboBox();
		panel.add(persistCombo);
		persistCombo.setModel(new DefaultComboBoxModel(persistenceTypes));

		typeCombo = new JComboBox();

		typeCombo.setModel(new DefaultComboBoxModel(types));
		panel.add(typeCombo);

		contentPane.setLayout(gl_contentPane);

	}

	/**
	 * Método initializeMainWindow. Método que se encarga de inicializar la
	 * ventana principal de la interfaz gráfica.
	 */
	private void initializeMainWindow() {
		// Inicialización de la ventana principal
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 500, 400);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		JScrollPane scroll = new JScrollPane(contentPane);

		setContentPane(scroll);
	}
}
